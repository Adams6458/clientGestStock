package com.m2i.paiement.domain;

import static org.assertj.core.api.Assertions.assertThat;

public class RapportAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRapportAllPropertiesEquals(Rapport expected, Rapport actual) {
        assertRapportAutoGeneratedPropertiesEquals(expected, actual);
        assertRapportAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRapportAllUpdatablePropertiesEquals(Rapport expected, Rapport actual) {
        assertRapportUpdatableFieldsEquals(expected, actual);
        assertRapportUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRapportAutoGeneratedPropertiesEquals(Rapport expected, Rapport actual) {
        assertThat(expected)
            .as("Verify Rapport auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRapportUpdatableFieldsEquals(Rapport expected, Rapport actual) {
        assertThat(expected)
            .as("Verify Rapport relevant properties")
            .satisfies(e -> assertThat(e.getUserID()).as("check userID").isEqualTo(actual.getUserID()))
            .satisfies(e -> assertThat(e.getMessage()).as("check message").isEqualTo(actual.getMessage()))
            .satisfies(e -> assertThat(e.getCodeErr()).as("check codeErr").isEqualTo(actual.getCodeErr()))
            .satisfies(e -> assertThat(e.getTextExpl()).as("check textExpl").isEqualTo(actual.getTextExpl()))
            .satisfies(e -> assertThat(e.getErrcode()).as("check errcode").isEqualTo(actual.getErrcode()))
            .satisfies(e -> assertThat(e.getTransactionId()).as("check transactionId").isEqualTo(actual.getTransactionId()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertRapportUpdatableRelationshipsEquals(Rapport expected, Rapport actual) {}
}
